(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{569:function(t,s,a){"use strict";a.r(s);var e=a(12),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-规范"}},[t._v("#")]),t._v(" Git 规范")]),t._v(" "),a("h2",{attrs:{id:"主要针对commit规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要针对commit规范"}},[t._v("#")]),t._v(" 主要针对commit规范")]),t._v(" "),a("p",[a("strong",[t._v("为什么要约束commit message")]),t._v(" "),a("table",[a("tr",[a("td",{attrs:{bgcolor:"#eee"}},[t._v("便于程序员对提交历史进行追溯，了解发生了什么情况。")])]),t._v(" "),a("tr",[a("td",{attrs:{bgcolor:"#eee"}},[t._v("一旦约束了commit message，意味着我们将慎重的进行每一次提交，不能再一股脑的把各种各样的改动都放在一个git commit里面，这样一来整个代码改动的历史也将更加清晰。")])]),t._v(" "),a("tr",[a("td",{attrs:{bgcolor:"#eee"}},[t._v("格式化的commit message才可以用于自动化输出Change log。")])])])]),t._v(" "),a("p",[a("strong",[t._v("commit message格式")])]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("("),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("): "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("subject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h3",{attrs:{id:"type-必须"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-必须"}},[t._v("#")]),t._v(" type(必须)")]),t._v(" "),a("p",[t._v("用于说明git commit的类别，只允许使用下面的标识。")]),t._v(" "),a("p",[t._v("feat：新功能（feature）。")]),t._v(" "),a("p",[t._v("fix：修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG。")]),t._v(" "),a("p",[t._v("docs：文档（documentation）。")]),t._v(" "),a("p",[t._v("style：格式（不影响代码运行的变动）。")]),t._v(" "),a("p",[t._v("refactor：重构（即不是新增功能，也不是修改bug的代码变动）。")]),t._v(" "),a("p",[t._v("perf：优化相关，比如提升性能、体验。")]),t._v(" "),a("p",[t._v("test：测试。")]),t._v(" "),a("p",[t._v("chore：构建过程或辅助工具的变动。")]),t._v(" "),a("p",[t._v("revert：回滚到上一个版本。")]),t._v(" "),a("p",[t._v("merge：代码合并。")]),t._v(" "),a("p",[t._v("sync：同步主线或分支的Bug。")]),t._v(" "),a("h3",{attrs:{id:"scope-可选"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scope-可选"}},[t._v("#")]),t._v(" scope(可选)")]),t._v(" "),a("p",[t._v("scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。")]),t._v(" "),a("h3",{attrs:{id:"subject-必须"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subject-必须"}},[t._v("#")]),t._v(" subject(必须)")]),t._v(" "),a("p",[t._v("subject是commit目的的简短描述，不超过50个字符。")]),t._v(" "),a("ul",[a("li",[t._v("结尾不加句号或其他标点符号。")]),t._v(" "),a("li",[t._v("根据以上规范git commit message将是如下的格式：")])]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("fix(UserComponent):用户查询缺少username属性\nfeat(Controller):用户查询接口开发\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);